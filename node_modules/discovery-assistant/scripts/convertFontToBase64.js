/**
 * Convert TTF font files to base64 for embedding in PDF
 * Run: node scripts/convertFontToBase64.js
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const fontsDir = path.join(__dirname, '../public/fonts');
const outputFile = path.join(__dirname, '../src/utils/hebrewFonts.ts');

const fontFiles = {
  normal: 'Rubik-Regular.ttf',
  bold: 'Rubik-Bold.ttf',
  italics: 'Rubik-Italic.ttf',
  bolditalics: 'Rubik-BoldItalic.ttf',
};

console.log('üîÑ Converting Hebrew fonts to base64...');

const fonts = {};

for (const [style, filename] of Object.entries(fontFiles)) {
  const fontPath = path.join(fontsDir, filename);

  if (!fs.existsSync(fontPath)) {
    console.error(`‚ùå Font file not found: ${fontPath}`);
    console.error(`   Please download it first!`);
    continue;
  }

  const fontBuffer = fs.readFileSync(fontPath);
  const base64 = fontBuffer.toString('base64');
  fonts[filename] = base64;

  console.log(`‚úÖ ${filename}: ${(fontBuffer.length / 1024).toFixed(2)} KB`);
}

// Generate TypeScript file
const tsContent = `/**
 * Hebrew Font Files (Rubik) - Base64 Encoded for pdfMake
 * Auto-generated by scripts/convertFontToBase64.js
 * DO NOT EDIT MANUALLY
 */

export const hebrewFonts = ${JSON.stringify(fonts, null, 2)};

export const hebrewFontVfs = {
  '${fontFiles.normal}': hebrewFonts['${fontFiles.normal}'],
  '${fontFiles.bold}': hebrewFonts['${fontFiles.bold}'],
  '${fontFiles.italics}': hebrewFonts['${fontFiles.italics}'],
  '${fontFiles.bolditalics}': hebrewFonts['${fontFiles.bolditalics}'],
};
`;

fs.writeFileSync(outputFile, tsContent, 'utf8');

console.log('');
console.log(`‚úÖ Generated: ${outputFile}`);
console.log(`üì¶ Total size: ${(fs.statSync(outputFile).size / 1024).toFixed(2)} KB`);
console.log('');
console.log('üéâ Done! You can now use Hebrew fonts in PDF generation.');
