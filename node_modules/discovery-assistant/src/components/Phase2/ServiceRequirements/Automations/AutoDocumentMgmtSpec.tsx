import { useState, useEffect } from 'react';
import { useMeetingStore } from '../../../../store/useMeetingStore';
import { Card } from '../../../Common/Card';
import { useSmartField } from '../../../../hooks/useSmartField';
import { useAutoSave } from '../../../../hooks/useAutoSave';
import { useBeforeUnload } from '../../../../hooks/useBeforeUnload';
import { CheckCircle, AlertCircle, Info } from 'lucide-react';

interface AutoDocumentMgmtConfig {
  storageProvider: 'google_drive' | 'onedrive' | 'dropbox' | 'box' | 's3';
  folderStructure: string;
  namingConvention: string;
  versionControl: boolean;
  accessControl: boolean;
  autoTagging: boolean;
}

export function AutoDocumentMgmtSpec() {
  const { currentMeeting, updateMeeting } = useMeetingStore();

  // Smart fields with auto-population
  const n8nInstanceUrl = useSmartField<string>({
    fieldId: 'n8n_instance_url',
    localPath: 'n8nWorkflow.instanceUrl',
    serviceId: 'auto-document-mgmt',
    autoSave: false
  });

  const alertEmail = useSmartField<string>({
    fieldId: 'alert_email',
    localPath: 'n8nWorkflow.errorHandling.alertEmail',
    serviceId: 'auto-document-mgmt',
    autoSave: false
  });
  const [config, setConfig] = useState<Partial<AutoDocumentMgmtConfig>>({
    storageProvider: 'google_drive',
    folderStructure: '',
    namingConvention: '',
    versionControl: true,
    accessControl: true,
    autoTagging: false,
  });

  // Auto-save hook for immediate and debounced saving
  const { saveData, isSaving, saveError } = useAutoSave({
    serviceId: 'auto-document-mgmt',
    category: 'automations'
  });

  useBeforeUnload(() => {
    // Force save all data when leaving
    const completeConfig = {
      ...config,
      n8nInstanceUrl: n8nInstanceUrl.value,
      alertEmail: alertEmail.value
    };
    saveData(completeConfig);
  });

  useEffect(() => {
    const automations = currentMeeting?.implementationSpec?.automations || [];
    const existing = automations.find((a: any) => a.serviceId === 'auto-document-mgmt');
    if (existing?.requirements) {
      setConfig(existing.requirements);
    }
  }, [currentMeeting]);

  // Auto-save on changes
  useEffect(() => {
    if (config.storageProvider || config.folderStructure) {
      const completeConfig = {
        ...config,
        n8nInstanceUrl: n8nInstanceUrl.value,
        alertEmail: alertEmail.value
      };
      saveData(completeConfig);
    }
  }, [config, n8nInstanceUrl.value, alertEmail.value, saveData]);

  const handleSave = async () => {
    // Build complete config with smart field values
    const completeConfig = {
      ...config,
      n8nInstanceUrl: n8nInstanceUrl.value,
      alertEmail: alertEmail.value
    };

    // Save using auto-save (manual save trigger)
    await saveData(completeConfig);

    alert('הגדרות נשמרו בהצלחה!');
  };

  return (
    <div className="space-y-6" dir="rtl">
      <Card title="שירות #13: ניהול מסמכים אוטומטי">
        <div className="space-y-6">
          {/* Smart Fields Info Banner */}
          {(n8nInstanceUrl.isAutoPopulated || alertEmail.isAutoPopulated) && (
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 flex items-start gap-3">
              <Info className="w-5 h-5 text-blue-600 flex-shrink-0 mt-0.5" />
              <div className="flex-1">
                <h4 className="font-semibold text-blue-900 mb-1">נתונים מולאו אוטומטית משלב 1</h4>
                <p className="text-sm text-blue-800">
                  חלק מהשדות מולאו באופן אוטומטי מהנתונים שנאספו בשלב 1.
                  תוכל לערוך אותם במידת הצורך.
                </p>
              </div>
            </div>
          )}

          {/* Conflict Warnings */}
          {(n8nInstanceUrl.hasConflict || alertEmail.hasConflict) && (
            <div className="bg-orange-50 border border-orange-200 rounded-lg p-4 flex items-start gap-3">
              <AlertCircle className="w-5 h-5 text-orange-600 flex-shrink-0 mt-0.5" />
              <div className="flex-1">
                <h4 className="font-semibold text-orange-900 mb-1">זוהה אי-התאמה בנתונים</h4>
                <p className="text-sm text-orange-800">
                  נמצאו ערכים שונים עבור אותו שדה במקומות שונים. אנא בדוק ותקן.
                </p>
              </div>
            </div>
          )}

          {/* Smart Fields Section */}
          <div className="grid grid-cols-1 gap-4">
            {/* Smart n8n Instance URL Field */}
            <div>
              <div className="flex items-center justify-between mb-2">
                <label className="block text-sm font-medium text-gray-700">
                  {n8nInstanceUrl.metadata.label.he}
                </label>
                {n8nInstanceUrl.isAutoPopulated && (
                  <span className="inline-flex items-center gap-1 px-2 py-0.5 bg-green-100 text-green-700 text-xs rounded-full">
                    <CheckCircle className="w-3 h-3" />
                    מולא אוטומטית
                  </span>
                )}
              </div>
              <input
                type="url"
                value={n8nInstanceUrl.value || ''}
                onChange={(e) => n8nInstanceUrl.setValue(e.target.value)}
                className={`w-full px-3 py-2 border rounded-md ${
                  n8nInstanceUrl.isAutoPopulated ? 'border-green-300 bg-green-50' : 'border-gray-300'
                } ${n8nInstanceUrl.hasConflict ? 'border-orange-300' : ''}`}
                placeholder="https://n8n.example.com"
              />
              {n8nInstanceUrl.isAutoPopulated && n8nInstanceUrl.source && (
                <p className="text-xs text-gray-500 mt-1">
                  מקור: {n8nInstanceUrl.source.description}
                </p>
              )}
            </div>

            {/* Smart Alert Email Field */}
            <div>
              <div className="flex items-center justify-between mb-2">
                <label className="block text-sm font-medium text-gray-700">
                  {alertEmail.metadata.label.he}
                </label>
                {alertEmail.isAutoPopulated && (
                  <span className="inline-flex items-center gap-1 px-2 py-0.5 bg-green-100 text-green-700 text-xs rounded-full">
                    <CheckCircle className="w-3 h-3" />
                    מולא אוטומטית
                  </span>
                )}
              </div>
              <input
                type="email"
                value={alertEmail.value || ''}
                onChange={(e) => alertEmail.setValue(e.target.value)}
                className={`w-full px-3 py-2 border rounded-md ${
                  alertEmail.isAutoPopulated ? 'border-green-300 bg-green-50' : 'border-gray-300'
                } ${alertEmail.hasConflict ? 'border-orange-300' : ''}`}
                placeholder="admin@example.com"
              />
              {alertEmail.isAutoPopulated && alertEmail.source && (
                <p className="text-xs text-gray-500 mt-1">
                  מקור: {alertEmail.source.description}
                </p>
              )}
            </div>
          </div>

          <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">ספק אחסון</label>
            <select value={config.storageProvider} onChange={(e) => setConfig({ ...config, storageProvider: e.target.value as any })}
              className="w-full px-3 py-2 border border-gray-300 rounded-md">
              <option value="google_drive">Google Drive</option>
              <option value="onedrive">OneDrive</option>
              <option value="dropbox">Dropbox</option>
              <option value="box">Box</option>
              <option value="s3">Amazon S3</option>
            </select>
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">מבנה תיקיות</label>
            <input type="text" value={config.folderStructure} onChange={(e) => setConfig({ ...config, folderStructure: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300 rounded-md" placeholder="לקוחות/שנה/חודש" />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">מוסכמת שמות</label>
            <input type="text" value={config.namingConvention} onChange={(e) => setConfig({ ...config, namingConvention: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300 rounded-md" placeholder="ClientName_YYYYMMDD_Type" />
          </div>
          <div className="space-y-3">
            <label className="flex items-center">
              <input type="checkbox" checked={config.versionControl}
                onChange={(e) => setConfig({ ...config, versionControl: e.target.checked })} className="mr-2" />
              <span className="text-sm">ניהול גרסאות</span>
            </label>
            <label className="flex items-center">
              <input type="checkbox" checked={config.accessControl}
                onChange={(e) => setConfig({ ...config, accessControl: e.target.checked })} className="mr-2" />
              <span className="text-sm">בקרת גישה</span>
            </label>
            <label className="flex items-center">
              <input type="checkbox" checked={config.autoTagging}
                onChange={(e) => setConfig({ ...config, autoTagging: e.target.checked })} className="mr-2" />
              <span className="text-sm">תיוג אוטומטי</span>
            </label>
          </div>
          <div className="flex justify-end pt-4 border-t">
            <button onClick={handleSave} className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700">שמור הגדרות</button>
          </div>
          </div>
        </div>
      </Card>
    </div>
  );
}
