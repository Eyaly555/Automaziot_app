import { useState, useEffect } from 'react';
import { useMeetingStore } from '../../../../store/useMeetingStore';
import { useSmartField } from '../../../../hooks/useSmartField';
import { useAutoSave } from '../../../../hooks/useAutoSave';
import { useBeforeUnload } from '../../../../hooks/useBeforeUnload';
import type { AutoWelcomeEmailRequirements } from '../../../../types/automationServices';
import { Card } from '../../../Common/Card';
import { Plus, Trash2, Save, CheckCircle, Info as InfoIcon } from 'lucide-react';

const generateId = () => Math.random().toString(36).substr(2, 9);

export function AutoWelcomeEmailSpec() {
  const { currentMeeting, updateMeeting } = useMeetingStore();

  // Smart fields
  const emailProvider = useSmartField<string>({
    fieldId: 'email_provider',
    localPath: 'emailServiceAccess.provider',
    serviceId: 'auto-welcome-email',
    autoSave: false
  });

  const smtpHost = useSmartField<string>({
    fieldId: 'smtp_host',
    localPath: 'emailServiceAccess.smtpCredentials.host',
    serviceId: 'auto-welcome-email',
    autoSave: false
  });

  const smtpPort = useSmartField<number>({
    fieldId: 'smtp_port',
    localPath: 'emailServiceAccess.smtpCredentials.port',
    serviceId: 'auto-welcome-email',
    autoSave: false
  });

  const businessHoursStart = useSmartField<string>({
    fieldId: 'business_hours_start',
    localPath: 'scheduling.businessHours.start',
    serviceId: 'auto-welcome-email',
    autoSave: false
  });

  const businessHoursEnd = useSmartField<string>({
    fieldId: 'business_hours_end',
    localPath: 'scheduling.businessHours.end',
    serviceId: 'auto-welcome-email',
    autoSave: false
  });

  const n8nInstanceUrl = useSmartField<string>({
    fieldId: 'n8n_instance_url',
    localPath: 'n8nWorkflow.instanceUrl',
    serviceId: 'auto-welcome-email',
    autoSave: false
  });

  const alertEmail = useSmartField<string>({
    fieldId: 'alert_email',
    localPath: 'n8nWorkflow.errorHandling.alertEmail',
    serviceId: 'auto-welcome-email',
    autoSave: false
  });

  const [config, setConfig] = useState<AutoWelcomeEmailRequirements>({
    triggerEvents: {
      newLead: true,
      newCustomer: true,
      appointmentBooked: false,
      serviceCompleted: false
    },
    emailSettings: {
      provider: 'gmail',
      fromName: '{companyName}',
      fromEmail: 'welcome@{companyDomain}.com',
      replyTo: 'support@{companyDomain}.com'
    },
    // Add emailServiceAccess
    emailServiceAccess: {
      provider: '',
      smtpCredentials: {
        host: '',
        port: 587
      }
    },
    contentTemplates: {
      newLead: {
        subject: 'ברוכים הבאים! {clientName} - בואו נכיר',
        body: `שלום {clientName},

תודה שהתעניינת בשירותינו!

אנחנו שמחים שהגעת אלינו ורוצים להכיר אותך טוב יותר.

בימים הקרובים ניצור איתך קשר כדי:
• להבין את הצרכים שלך
• להציע פתרונות מותאמים
• לענות על כל השאלות שלך

בינתיים, אתה מוזמן לבקר באתר שלנו או לעיין בחומרים ששלחנו.

בברכה,
{companyName}
{senderName}
{contactPhone}
{contactEmail}`
      },
      newCustomer: {
        subject: 'ברוכים הבאים ל{companyName}! התחלנו לעבוד יחד',
        body: `שלום {clientName},

שמחים להודיע שהתחלנו לעבוד יחד!

מה השלבים הבאים:
1. נקבע פגישת היכרות מפורטת
2. נאסוף את כל הפרטים הנדרשים
3. נתחיל בתהליך היישום

צוות {companyName} עומד לרשותך לכל שאלה.

בברכה,
צוות {companyName}`
      },
      appointmentBooked: {
        subject: 'אישור פגישה - {appointmentDate}',
        body: `שלום {clientName},

פגישתנו נקבעה ל-{appointmentDate} בשעה {appointmentTime}.

פרטי הפגישה:
📍 מיקום: {appointmentLocation}
⏱️ משך זמן: {appointmentDuration}
👤 עם: {appointmentWith}

נשמח לראות אותך!

בברכה,
{companyName}`
      }
    },
    personalization: {
      fields: ['clientName', 'companyName', 'senderName', 'companyDomain', 'contactPhone', 'contactEmail'],
      dynamicContent: true
    },
    scheduling: {
      sendImmediately: true,
      delayHours: 0,
      businessHours: {
        start: '09:00',
        end: '18:00'
      },
      businessHoursOnly: true,
      skipWeekends: true
    },
    // Add n8nWorkflow
    n8nWorkflow: {
      instanceUrl: '',
      webhookEndpoint: '',
      httpsEnabled: true,
      errorHandling: {
        retryAttempts: 3,
        alertEmail: ''
      }
    },
    tracking: {
      openTracking: true,
      clickTracking: true,
      unsubscribeLink: true
    }
  });

  // Auto-save hook for immediate and debounced saving
  const { saveData, isSaving, saveError } = useAutoSave({
    serviceId: 'auto-welcome-email',
    category: 'automations'
  });

  useBeforeUnload(() => {
    // Force save all data when leaving
    const completeConfig = {
      ...config,
      emailServiceAccess: {
        ...config.emailServiceAccess,
        provider: emailProvider.value || config.emailServiceAccess.provider,
        smtpCredentials: {
          ...config.emailServiceAccess.smtpCredentials,
          host: smtpHost.value || config.emailServiceAccess.smtpCredentials.host,
          port: smtpPort.value || config.emailServiceAccess.smtpCredentials.port
        }
      },
      scheduling: {
        ...config.scheduling,
        businessHours: {
          ...config.scheduling.businessHours,
          start: businessHoursStart.value || config.scheduling.businessHours.start,
          end: businessHoursEnd.value || config.scheduling.businessHours.end
        }
      },
      n8nWorkflow: {
        ...config.n8nWorkflow,
        instanceUrl: n8nInstanceUrl.value || config.n8nWorkflow.instanceUrl,
        errorHandling: {
          ...config.n8nWorkflow.errorHandling,
          alertEmail: alertEmail.value || config.n8nWorkflow.errorHandling.alertEmail
        }
      }
    };
    saveData(completeConfig);
  });

  useEffect(() => {
    if (currentMeeting?.implementationSpec?.automations) {
      const existing = currentMeeting.implementationSpec.automations.find(
        (a: any) => a.serviceId === 'auto-welcome-email'
      );
      if (existing) {
        setConfig(existing.requirements);
      }
    }
  }, [currentMeeting]);

  // Save handler
  const handleSave = async () => {
    const completeConfig = {
      ...config,
      emailServiceAccess: {
        ...config.emailServiceAccess,
        provider: emailProvider.value || config.emailServiceAccess.provider,
        smtpCredentials: {
          ...config.emailServiceAccess.smtpCredentials,
          host: smtpHost.value || config.emailServiceAccess.smtpCredentials.host,
          port: smtpPort.value || config.emailServiceAccess.smtpCredentials.port
        }
      },
      scheduling: {
        ...config.scheduling,
        businessHours: {
          ...config.scheduling.businessHours,
          start: businessHoursStart.value || config.scheduling.businessHours.start,
          end: businessHoursEnd.value || config.scheduling.businessHours.end
        }
      },
      n8nWorkflow: {
        ...config.n8nWorkflow,
        instanceUrl: n8nInstanceUrl.value || config.n8nWorkflow.instanceUrl,
        errorHandling: {
          ...config.n8nWorkflow.errorHandling,
          alertEmail: alertEmail.value || config.n8nWorkflow.errorHandling.alertEmail
        }
      }
    };

    await saveData(completeConfig);
  };

  return (
    <div className="space-y-6" dir="rtl">
      {/* Smart Fields Info Banner */}
      {(emailProvider.isAutoPopulated || smtpHost.isAutoPopulated || smtpPort.isAutoPopulated || 
        businessHoursStart.isAutoPopulated || businessHoursEnd.isAutoPopulated || 
        n8nInstanceUrl.isAutoPopulated || alertEmail.isAutoPopulated) && (
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6 flex items-start gap-3">
          <InfoIcon className="w-5 h-5 text-blue-600 flex-shrink-0 mt-0.5" />
          <div className="flex-1">
            <h4 className="font-semibold text-blue-900 mb-1">נתונים מולאו אוטומטית משלב 1</h4>
            <p className="text-sm text-blue-800">
              חלק מהשדות מולאו באופן אוטומטי מהנתונים שנאספו בשלב 1.
              תוכל לערוך אותם במידת הצורך.
            </p>
          </div>
        </div>
      )}

      <Card title="אימיילי קבלת פנים אוטומטיים" subtitle="הגדר אימיילים אוטומטיים לשלבים שונים במחזור חיי הלקוח">
        <div className="space-y-6">
          {/* אירועי טריגר - existing */}
          <div>
            <h4 className="font-medium mb-3">אירועי טריגר לשליחה</h4>
            <div className="space-y-2">
              {Object.entries(config.triggerEvents).map(([event, enabled]) => (
                <label key={event} className="flex items-center gap-2">
                  <input
                    type="checkbox"
                    checked={enabled}
                    onChange={(e) => setConfig(prev => ({
                      ...prev,
                      triggerEvents: { ...prev.triggerEvents, [event]: e.target.checked }
                    }))}
                  />
                  <span>
                    {event === 'newLead' && 'ליד חדש'}
                    {event === 'newCustomer' && 'לקוח חדש'}
                    {event === 'appointmentBooked' && 'פגישה נקבעה'}
                    {event === 'serviceCompleted' && 'שירות הושלם'}
                  </span>
                </label>
              ))}
            </div>
          </div>

          {/* הגדרות אימייל - updated with smart email_provider */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <div className="flex items-center justify-between mb-2">
                <label className="block text-sm font-medium text-gray-700">
                  {emailProvider.metadata.label.he}
                </label>
                {emailProvider.isAutoPopulated && (
                  <span className="inline-flex items-center gap-1 px-2 py-0.5 bg-green-100 text-green-700 text-xs rounded-full">
                    <CheckCircle className="w-3 h-3" />
                    מולא אוטומטית
                  </span>
                )}
              </div>
              <select
                value={emailProvider.value || ''}
                onChange={(e) => emailProvider.setValue(e.target.value)}
                className={`w-full p-2 border rounded-lg ${
                  emailProvider.isAutoPopulated ? 'border-green-300 bg-green-50' : 'border-gray-300'
                }`}
              >
                <option value="">בחר ספק</option>
                <option value="sendgrid">SendGrid</option>
                <option value="mailgun">Mailgun</option>
                <option value="smtp">SMTP</option>
                <option value="gmail">Gmail API</option>
                <option value="outlook">Outlook/Office 365</option>
              </select>
              {emailProvider.isAutoPopulated && emailProvider.source && (
                <p className="text-xs text-gray-500 mt-1">מקור: {emailProvider.source.description}</p>
              )}
            </div>

            <div>
              <label className="block text-sm font-medium mb-2">שם השולח</label>
              <input
                type="text"
                value={config.emailSettings.fromName}
                onChange={(e) => setConfig(prev => ({
                  ...prev,
                  emailSettings: { ...prev.emailSettings, fromName: e.target.value }
                }))}
                className="w-full p-2 border rounded-lg"
                placeholder="{companyName}"
              />
            </div>

            <div>
              <label className="block text-sm font-medium mb-2">כתובת אימייל לשליחה</label>
              <input
                type="email"
                value={config.emailSettings.fromEmail}
                onChange={(e) => setConfig(prev => ({
                  ...prev,
                  emailSettings: { ...prev.emailSettings, fromEmail: e.target.value }
                }))}
                className="w-full p-2 border rounded-lg"
                placeholder="welcome@{companyDomain}.com"
              />
            </div>

            <div>
              <label className="block text-sm font-medium mb-2">כתובת מענה</label>
              <input
                type="email"
                value={config.emailSettings.replyTo}
                onChange={(e) => setConfig(prev => ({
                  ...prev,
                  emailSettings: { ...prev.emailSettings, replyTo: e.target.value }
                }))}
                className="w-full p-2 border rounded-lg"
                placeholder="support@{companyDomain}.com"
              />
            </div>
          </div>

          {/* SMTP Settings if SMTP */}
          {emailProvider.value === 'smtp' && (
            <div className="space-y-4">
              <h4 className="font-medium mb-3">הגדרות SMTP</h4>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <div className="flex items-center justify-between mb-2">
                    <label className="block text-sm font-medium text-gray-700">
                      {smtpHost.metadata.label.he}
                    </label>
                    {smtpHost.isAutoPopulated && (
                      <span className="inline-flex items-center gap-1 px-2 py-0.5 bg-green-100 text-green-700 text-xs rounded-full">
                        <CheckCircle className="w-3 h-3" />
                        מולא אוטומטית
                      </span>
                    )}
                  </div>
                  <input
                    type="text"
                    value={smtpHost.value || ''}
                    onChange={(e) => smtpHost.setValue(e.target.value)}
                    className={`w-full p-2 border rounded-lg ${
                      smtpHost.isAutoPopulated ? 'border-green-300 bg-green-50' : 'border-gray-300'
                    }`}
                    placeholder="smtp.gmail.com"
                  />
                  {smtpHost.isAutoPopulated && smtpHost.source && (
                    <p className="text-xs text-gray-500 mt-1">מקור: {smtpHost.source.description}</p>
                  )}
                </div>

                <div>
                  <div className="flex items-center justify-between mb-2">
                    <label className="block text-sm font-medium text-gray-700">
                      {smtpPort.metadata.label.he}
                    </label>
                    {smtpPort.isAutoPopulated && (
                      <span className="inline-flex items-center gap-1 px-2 py-0.5 bg-green-100 text-green-700 text-xs rounded-full">
                        <CheckCircle className="w-3 h-3" />
                        מולא אוטומטית
                      </span>
                    )}
                  </div>
                  <input
                    type="number"
                    value={smtpPort.value || ''}
                    onChange={(e) => smtpPort.setValue(parseInt(e.target.value) || 587)}
                    className={`w-full p-2 border rounded-lg ${
                      smtpPort.isAutoPopulated ? 'border-green-300 bg-green-50' : 'border-gray-300'
                    }`}
                    placeholder="587"
                    min="1"
                    max="65535"
                  />
                  {smtpPort.isAutoPopulated && smtpPort.source && (
                    <p className="text-xs text-gray-500 mt-1">מקור: {smtpPort.source.description}</p>
                  )}
                </div>
              </div>
            </div>
          )}

          {/* תבניות תוכן - existing */}
          <div>
            <h4 className="font-medium mb-3">תבניות תוכן</h4>

            {config.triggerEvents.newLead && (
              <div className="mb-6 p-4 border rounded-lg">
                <h5 className="font-medium mb-3">ליד חדש</h5>
                <div className="space-y-3">
                  <div>
                    <label className="block text-sm font-medium mb-1">נושא</label>
                    <input
                      type="text"
                      value={config.contentTemplates.newLead.subject}
                      onChange={(e) => setConfig(prev => ({
                        ...prev,
                        contentTemplates: {
                          ...prev.contentTemplates,
                          newLead: { ...prev.contentTemplates.newLead, subject: e.target.value }
                        }
                      }))}
                      className="w-full p-2 border rounded-lg"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium mb-1">תוכן</label>
                    <textarea
                      value={config.contentTemplates.newLead.body}
                      onChange={(e) => setConfig(prev => ({
                        ...prev,
                        contentTemplates: {
                          ...prev.contentTemplates,
                          newLead: { ...prev.contentTemplates.newLead, body: e.target.value }
                        }
                      }))}
                      rows={8}
                      className="w-full p-2 border rounded-lg font-mono text-sm"
                    />
                  </div>
                </div>
              </div>
            )}

            {config.triggerEvents.newCustomer && (
              <div className="mb-6 p-4 border rounded-lg">
                <h5 className="font-medium mb-3">לקוח חדש</h5>
                <div className="space-y-3">
                  <div>
                    <label className="block text-sm font-medium mb-1">נושא</label>
                    <input
                      type="text"
                      value={config.contentTemplates.newCustomer.subject}
                      onChange={(e) => setConfig(prev => ({
                        ...prev,
                        contentTemplates: {
                          ...prev.contentTemplates,
                          newCustomer: { ...prev.contentTemplates.newCustomer, subject: e.target.value }
                        }
                      }))}
                      className="w-full p-2 border rounded-lg"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium mb-1">תוכן</label>
                    <textarea
                      value={config.contentTemplates.newCustomer.body}
                      onChange={(e) => setConfig(prev => ({
                        ...prev,
                        contentTemplates: {
                          ...prev.contentTemplates,
                          newCustomer: { ...prev.contentTemplates.newCustomer, body: e.target.value }
                        }
                      }))}
                      rows={6}
                      className="w-full p-2 border rounded-lg font-mono text-sm"
                    />
                  </div>
                </div>
              </div>
            )}

            {config.triggerEvents.appointmentBooked && (
              <div className="mb-6 p-4 border rounded-lg">
                <h5 className="font-medium mb-3">פגישה נקבעה</h5>
                <div className="space-y-3">
                  <div>
                    <label className="block text-sm font-medium mb-1">נושא</label>
                    <input
                      type="text"
                      value={config.contentTemplates.appointmentBooked.subject}
                      onChange={(e) => setConfig(prev => ({
                        ...prev,
                        contentTemplates: {
                          ...prev.contentTemplates,
                          appointmentBooked: { ...prev.contentTemplates.appointmentBooked, subject: e.target.value }
                        }
                      }))}
                      className="w-full p-2 border rounded-lg"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium mb-1">תוכן</label>
                    <textarea
                      value={config.contentTemplates.appointmentBooked.body}
                      onChange={(e) => setConfig(prev => ({
                        ...prev,
                        contentTemplates: {
                          ...prev.contentTemplates,
                          appointmentBooked: { ...prev.contentTemplates.appointmentBooked, body: e.target.value }
                        }
                      }))}
                      rows={5}
                      className="w-full p-2 border rounded-lg font-mono text-sm"
                    />
                  </div>
                </div>
              </div>
            )}
          </div>

          {/* הגדרות תזמון - updated with business hours */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="flex items-center gap-2">
                <input
                  type="checkbox"
                  checked={config.scheduling.sendImmediately}
                  onChange={(e) => setConfig(prev => ({
                    ...prev,
                    scheduling: { ...prev.scheduling, sendImmediately: e.target.checked }
                  }))}
                />
                <span className="text-sm">שלח מיידית</span>
              </label>
            </div>

            <div>
              <label className="block text-sm font-medium mb-2">עיכוב בשעות (אם לא מיידי)</label>
              <input
                type="number"
                value={config.scheduling.delayHours}
                onChange={(e) => setConfig(prev => ({
                  ...prev,
                  scheduling: { ...prev.scheduling, delayHours: parseInt(e.target.value) || 0 }
                }))}
                className="w-full p-2 border rounded-lg"
                min="0"
                max="72"
              />
            </div>

            <div>
              <div className="flex items-center justify-between mb-2">
                <label className="block text-sm font-medium text-gray-700">
                  {businessHoursStart.metadata.label.he}
                </label>
                {businessHoursStart.isAutoPopulated && (
                  <span className="inline-flex items-center gap-1 px-2 py-0.5 bg-green-100 text-green-700 text-xs rounded-full">
                    <CheckCircle className="w-3 h-3" />
                    מולא אוטומטית
                  </span>
                )}
              </div>
              <input
                type="time"
                value={businessHoursStart.value || ''}
                onChange={(e) => businessHoursStart.setValue(e.target.value)}
                className={`w-full p-2 border rounded-lg ${
                  businessHoursStart.isAutoPopulated ? 'border-green-300 bg-green-50' : 'border-gray-300'
                }`}
                placeholder="09:00"
              />
              {businessHoursStart.isAutoPopulated && businessHoursStart.source && (
                <p className="text-xs text-gray-500 mt-1">מקור: {businessHoursStart.source.description}</p>
              )}
            </div>

            <div>
              <div className="flex items-center justify-between mb-2">
                <label className="block text-sm font-medium text-gray-700">
                  {businessHoursEnd.metadata.label.he}
                </label>
                {businessHoursEnd.isAutoPopulated && (
                  <span className="inline-flex items-center gap-1 px-2 py-0.5 bg-green-100 text-green-700 text-xs rounded-full">
                    <CheckCircle className="w-3 h-3" />
                    מולא אוטומטית
                  </span>
                )}
              </div>
              <input
                type="time"
                value={businessHoursEnd.value || ''}
                onChange={(e) => businessHoursEnd.setValue(e.target.value)}
                className={`w-full p-2 border rounded-lg ${
                  businessHoursEnd.isAutoPopulated ? 'border-green-300 bg-green-50' : 'border-gray-300'
                }`}
                placeholder="18:00"
              />
              {businessHoursEnd.isAutoPopulated && businessHoursEnd.source && (
                <p className="text-xs text-gray-500 mt-1">מקור: {businessHoursEnd.source.description}</p>
              )}
            </div>

            <div>
              <label className="flex items-center gap-2">
                <input
                  type="checkbox"
                  checked={config.scheduling.businessHoursOnly}
                  onChange={(e) => setConfig(prev => ({
                    ...prev,
                    scheduling: { ...prev.scheduling, businessHoursOnly: e.target.checked }
                  }))}
                />
                <span className="text-sm">שלח רק בשעות עבודה</span>
              </label>
            </div>

            <div>
              <label className="flex items-center gap-2">
                <input
                  type="checkbox"
                  checked={config.scheduling.skipWeekends}
                  onChange={(e) => setConfig(prev => ({
                    ...prev,
                    scheduling: { ...prev.scheduling, skipWeekends: e.target.checked }
                  }))}
                />
                <span className="text-sm">דלג על סופי שבוע</span>
              </label>
            </div>
          </div>

          {/* n8n Workflow Section */}
          <div className="border-t pt-6">
            <h3 className="text-lg font-semibold mb-4">הגדרות n8n Workflow</h3>
            <div className="space-y-4">
              <div>
                <div className="flex items-center justify-between mb-2">
                  <label className="block text-sm font-medium text-gray-700">
                    {n8nInstanceUrl.metadata.label.he}
                  </label>
                  {n8nInstanceUrl.isAutoPopulated && (
                    <span className="inline-flex items-center gap-1 px-2 py-0.5 bg-green-100 text-green-700 text-xs rounded-full">
                      <CheckCircle className="w-3 h-3" />
                      מולא אוטומטית
                    </span>
                  )}
                </div>
                <input
                  type="url"
                  value={n8nInstanceUrl.value || ''}
                  onChange={(e) => n8nInstanceUrl.setValue(e.target.value)}
                  className={`w-full p-2 border rounded-lg ${
                    n8nInstanceUrl.isAutoPopulated ? 'border-green-300 bg-green-50' : 'border-gray-300'
                  }`}
                  placeholder="https://n8n.example.com"
                />
                {n8nInstanceUrl.isAutoPopulated && n8nInstanceUrl.source && (
                  <p className="text-xs text-gray-500 mt-1">מקור: {n8nInstanceUrl.source.description}</p>
                )}
              </div>

              <label className="block text-sm font-medium text-gray-700 mb-2">Webhook Endpoint</label>
              <input
                type="url"
                value={config.n8nWorkflow.webhookEndpoint || ''}
                onChange={(e) => setConfig(prev => ({
                  ...prev,
                  n8nWorkflow: { ...prev.n8nWorkflow, webhookEndpoint: e.target.value }
                }))}
                className="w-full p-2 border rounded-lg"
                placeholder="https://n8n.example.com/webhook/..."
              />

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">ניסיונות חוזרים</label>
                  <input
                    type="number"
                    value={config.n8nWorkflow.errorHandling.retryAttempts || 3}
                    onChange={(e) => setConfig(prev => ({
                      ...prev,
                      n8nWorkflow: {
                        ...prev.n8nWorkflow,
                        errorHandling: {
                          ...prev.n8nWorkflow.errorHandling,
                          retryAttempts: parseInt(e.target.value) || 3
                        }
                      }
                    }))}
                    className="w-full p-2 border rounded-lg"
                    min="0"
                    max="10"
                  />
                </div>

                <div>
                  <div className="flex items-center justify-between mb-2">
                    <label className="block text-sm font-medium text-gray-700">
                      {alertEmail.metadata.label.he}
                    </label>
                    {alertEmail.isAutoPopulated && (
                      <span className="inline-flex items-center gap-1 px-2 py-0.5 bg-green-100 text-green-700 text-xs rounded-full">
                        <CheckCircle className="w-3 h-3" />
                        מולא אוטומטית
                      </span>
                    )}
                  </div>
                  <input
                    type="email"
                    value={alertEmail.value || ''}
                    onChange={(e) => alertEmail.setValue(e.target.value)}
                    className={`w-full p-2 border rounded-lg ${
                      alertEmail.isAutoPopulated ? 'border-green-300 bg-green-50' : 'border-gray-300'
                    }`}
                    placeholder="alerts@example.com"
                  />
                  {alertEmail.isAutoPopulated && alertEmail.source && (
                    <p className="text-xs text-gray-500 mt-1">מקור: {alertEmail.source.description}</p>
                  )}
                </div>
              </div>

              <label className="flex items-center gap-2">
                <input
                  type="checkbox"
                  checked={config.n8nWorkflow.httpsEnabled || true}
                  onChange={(e) => setConfig(prev => ({
                    ...prev,
                    n8nWorkflow: { ...prev.n8nWorkflow, httpsEnabled: e.target.checked }
                  }))}
                  className="rounded border-gray-300"
                />
                <span className="text-sm">HTTPS מופעל</span>
              </label>
            </div>
          </div>

          {/* מעקב וניתוח - existing */}
          <div>
            <h4 className="font-medium mb-3">מעקב וניתוח</h4>
            <div className="space-y-2">
              <label className="flex items-center gap-2">
                <input
                  type="checkbox"
                  checked={config.tracking.openTracking}
                  onChange={(e) => setConfig(prev => ({
                    ...prev,
                    tracking: { ...prev.tracking, openTracking: e.target.checked }
                  }))}
                />
                <span className="text-sm">מעקב פתיחת אימיילים</span>
              </label>

              <label className="flex items-center gap-2">
                <input
                  type="checkbox"
                  checked={config.tracking.clickTracking}
                  onChange={(e) => setConfig(prev => ({
                    ...prev,
                    tracking: { ...prev.tracking, clickTracking: e.target.checked }
                  }))}
                />
                <span className="text-sm">מעקב לחיצות על קישורים</span>
              </label>

              <label className="flex items-center gap-2">
                <input
                  type="checkbox"
                  checked={config.tracking.unsubscribeLink}
                  onChange={(e) => setConfig(prev => ({
                    ...prev,
                    tracking: { ...prev.tracking, unsubscribeLink: e.target.checked }
                  }))}
                />
                <span className="text-sm">קישור ביטול מנוי</span>
              </label>
            </div>
          </div>

          {/* Save Status and Button */}
          <div className="flex justify-between items-center gap-4 pt-4 border-t">
            <div className="flex items-center gap-2">
              {isSaving && (
                <div className="flex items-center gap-2 text-blue-600">
                  <div className="w-4 h-4 border-2 border-blue-600 border-t-transparent rounded-full animate-spin"></div>
                  <span className="text-sm">שומר אוטומטית...</span>
                </div>
              )}
              {saveError && (
                <div className="flex items-center gap-2 text-red-600">
                  <span className="text-sm">שגיאה בשמירה</span>
                </div>
              )}
              {!isSaving && !saveError && config.triggerEvents.newLead && (
                <div className="flex items-center gap-2 text-green-600">
                  <div className="w-2 h-2 bg-green-600 rounded-full"></div>
                  <span className="text-sm">נשמר אוטומטית</span>
                </div>
              )}
            </div>
            <button
              onClick={handleSave}
              disabled={isSaving}
              className="flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed"
            >
              <Save className="w-4 h-4" />
              {isSaving ? 'שומר...' : 'שמור ידנית'}
            </button>
          </div>
        </div>
      </Card>
    </div>
  );
}



